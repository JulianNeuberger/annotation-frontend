import { Entity, Mention, MentionItem, Relation, RelationItem, Token } from "../interfaces/interfaces.ts";

export enum EventActionType {
    PROCESS_START = 'PROCESS_START',
    PROCESS_END = 'PROCESS_END',
    STEP_1 = 'STEP_MENTION_SUGGESTION',
    STEP_2 = 'STEP_METION',
    STEP_3 = 'STEP_ENTITIES',
    STEP_4 = 'STEP_RELATION_SUGGESTION',
    STEP_5 = 'STEP_RELATIONS',
    MENTION_SUGGESTION_ACCEPTED = 'MENTION_SUGGESTION_ACCEPTED',
    MENTION_SUGGESTION_ACCEPTED_ALL = 'MENTION_SUGGESTION_ACCEPTED_ALL',
    MENTION_SUGGESTION_TYPE_UPDATED = 'MENTION_SUGGESTION_TYPE_UPDATED',
    MENTION_SUGGESTION_BOUNDS_UPDATED = 'MENTION_SUGGESTION_BOUNDS_UPDATED',
    MENTION_SUGGESTION_REJECTED = 'MENTION_SUGGESTION_REJECTED',
    MENTION_SUGGESTION_REJECTED_ALL = 'MENTION_SUGGESTION_REJECTED_ALL',
    RELATION_SUGGESTION_ACCEPTED = 'RELATION_SUGGESTION_ACCEPTED',
    RELATION_SUGGESTION_ACCEPTED_ALL = 'RELATION_SUGGESTION_ACCEPTED_ALL',
    RELATION_SUGGESTION_TYPE_UPDATED = 'RELATION_SUGGESTION_TYPE_UPDATED',
    RELATION_SUGGESTION_REJECTED = 'RELATION_SUGGESTION_REJECTED',
    RELATION_SUGGESTION_REJECTED_ALL = 'RELATION_SUGGESTION_REJECTED_ALL',
    RELATION_SUGGESTION_MARKED = 'RELATION_SUGGESTION_MARKED',
    TOKEN_SELECTED = 'TOKEN_SELECTED',
    TOKEN_DESELECTED = 'TOKEN_DESELECTED',
    MENTION_SELECTED = 'MENTION_SELECTED',
    MENTION_DESELECTED = 'MENTION_DESELECTED',
    MENTION_DELETED = 'MENTION_DELETED',
    MENTION_CREATED = 'MENTION_CREATED',
    MENTION_TYPE_UPDATED = 'MENTION_TYPE_UPDATED',
    MENTION_BOUNDS_UPDATED = 'MENTION_BOUNDS_UPDATED',
    RELATION_CREATED = 'RELATION_CREATED',
    RELATION_DELETED = 'RELATION_DELETED',
    RELATION_TYPE_UPDATED = 'RELATION_TYPE_UPDATED',
    RELATION_MARKED = 'RELATION_MARKED',
    RELATION_UNMARKED = 'RELATION_UNMARKED',
    ENTITY_MENTION_REMOVED = 'ENTITY_REMOVED',
    ENTITY_GROUPED = 'ENTITY_GROUPED',
    REDO_ACTION = 'REDO_ACTION',
    UNDO_ACTION = 'UNDO_ACTION',
}

export interface EventLog {
    timestamp: number;
    action: EventActionType;
    data?: LogData;
}

type LogData = MentionItem | RelationItem | Token | Mention | Entity | Relation | number;

class Logger {
    private logs: EventLog[] = [];

    logEvent(event: EventLog): void {
        this.logs.push(event);
    }

    getLogs(): EventLog[] {
        return this.logs;
    }
}

const logger = new Logger();
export default logger;




// export function logEvent<T>(event: EventLog<T>): void {
//     console.log('Event logged:', event);
// }